/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package dicom;

import dicom.basedatos.DBconecction;
import dicom.config.DCMconfig;
import dicom.operations.DCMcfind;
import dicom.statics.PieChart;
import dicom.utils.Study;
import dicom.utils.StudyListModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.util.Date;
import java.util.Set;
import java.util.TreeMap;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;
import org.jfree.ui.RefineryUtilities;

/**
 *
 * @author MH
 */
public class DCMmainWindow extends javax.swing.JFrame {
    StudyListModel list = new StudyListModel();
       
      DefaultPieDataset dataset = new DefaultPieDataset( );
      int dx =0;
      int mr =0;
      int ct =0;
      int us =0;
      int mg =0;
      
                    
        JFreeChart chart = ChartFactory.createPieChart(      
         "Estadisticas por modalidad",   // chart title 
         dataset,          // data    
         true,             // include legend   
         true, 
         false);
    /**
     * Creates new form DCMmainWindow
     */
    public DCMmainWindow() {
        initComponents();
         
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnDCMfind = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        studyPanel = new javax.swing.JScrollPane();
        patientList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        studyInfoArea = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        lblCount = new javax.swing.JLabel();
        modChartPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnDCMfind.setText("Verificar");
        btnDCMfind.setActionCommand("dcmFind");
        btnDCMfind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDCMfindActionPerformed(evt);
            }
        });

        jButton2.setText("jButton2");

        studyPanel.setViewportBorder(javax.swing.BorderFactory.createTitledBorder("Estudios inconcistentes"));

        patientList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                patientListMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                patientListMousePressed(evt);
            }
        });
        patientList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                patientListPropertyChange(evt);
            }
        });
        studyPanel.setViewportView(patientList);

        studyInfoArea.setColumns(20);
        studyInfoArea.setRows(5);
        studyInfoArea.setEnabled(false);
        jScrollPane1.setViewportView(studyInfoArea);

        jLabel1.setText("Estudios incorrectos");

        lblCount.setText("0");

        modChartPanel.setBackground(new java.awt.Color(255, 51, 204));

        javax.swing.GroupLayout modChartPanelLayout = new javax.swing.GroupLayout(modChartPanel);
        modChartPanel.setLayout(modChartPanelLayout);
        modChartPanelLayout.setHorizontalGroup(
            modChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 309, Short.MAX_VALUE)
        );
        modChartPanelLayout.setVerticalGroup(
            modChartPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 295, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(studyPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(modChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btnDCMfind)
                                        .addGap(41, 41, 41)
                                        .addComponent(jLabel1)))
                                .addGap(27, 27, 27)
                                .addComponent(lblCount)))
                        .addGap(0, 286, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(btnDCMfind))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(lblCount))))
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addGap(18, 18, 18)
                .addComponent(modChartPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
            .addComponent(studyPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 527, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnDCMfindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDCMfindActionPerformed
        // TODO add your handling code here:
        
         DCMconfig dcmConfig= new DCMconfig();
         dcmConfig.setDateStart(new Date(System.currentTimeMillis()));
        dcmConfig.setFormat("yyyyMMdd");
       // System.out.println(dcmConfig.getDateStart());
       // dcmConfig.setLOCAL_AE("MHPC");
       // dcmConfig.setREMOTE_AE("SERVERPACS");
        dcmConfig.setREMOTE_HOST("10.16.107.13");
        dcmConfig.setLOCAL_AE("EMULATOR_TEST");
        dcmConfig.setREMOTE_AE("phia-pacsFIR");
       
        dcmConfig.setREMOTE_PORT(2104);
                
    /*    // TODO code application logic here
        //DCMinfo dcmInfo = new DCMinfo();
       
       
       // dcmInfo.readDicomAttributes ();
      // DCMcecho dcmcEcho= new DCMcecho(dcmConfig);
      //  dcmcEcho.echo();
       
       
        //DCMassociation dcmAssociation = new DCMassociation(dcmConfig);
        //dcmAssociation.DCMstartAssociation();
        
        
        //DCMimage dcmImage = new DCMimage();
        //dcmImage.image();
        
       
        
        //DCMwado dcmWado = new DCMwado(dcmConfig);
       // dcmWado.wadoRequest();
        
      
      // Empieza con HGDL y no esta en la WL
     */
      
    new Thread() {
             @Override
             public void run() {
                 DCMcfind cFind= new DCMcfind(dcmConfig);
                TreeMap<String,Study>   pacsPatients =  cFind.cFind();
                TreeMap <String,Study>  pacsPatients2 = (TreeMap) pacsPatients.clone();
                 DBconecction dbConnection = new DBconecction(dcmConfig);
                TreeMap   wlPatients = dbConnection.connectionTest();
       
      
      Set <String> anKeys = pacsPatients2.keySet();
      anKeys.forEach(
              key -> {
                  if ( (key.startsWith("HGDL") && !wlPatients.containsKey(key) ))
                  {
                     pacsPatients.remove(key);
                  }
              }
      
      );
      
        System.out.println("Estudios con inconsistencias: " + pacsPatients.size());
               
                
                 pacsPatients.forEach( (an,st) ->{
                    
                        
                        list.addStudy(st);
                      String mod=  st.getStudyModality().toLowerCase().trim();
                      switch (mod) {
                         case "dx":
                             dx++;
                             break;
                             case "mr":
                             mr++;
                             break;
                             case "ct":
                             ct++;
                             break;
                             case "us":
                             us++;
                             break;
                             case "mg":
                             mg++;
                             break;
                         default:
                             throw new AssertionError();
                     }
                        
                 });
                 
                    patientList.setModel(list);
                    studyPanel.setVisible(true);
                   
                    lblCount.setText(  Integer.toString( pacsPatients.size()));
                    
                    lblCount.setForeground(Color.RED);
                    
                    
                    
                    
                
                   
                    dataset.setValue( "DX" , dx );  
                    dataset.setValue( "MR" , mr );   
                    dataset.setValue( "CT" , ct );    
                    dataset.setValue( "US" , us ); 
                    dataset.setValue( "MG" , mg ); 
                    
                    ChartPanel myChart = new ChartPanel(chart);
                   // myChart.setMouseWheelEnabled(true);
                    modChartPanel.setLayout(new java.awt.BorderLayout());
                    modChartPanel.add(myChart,BorderLayout.CENTER);
                    modChartPanel.validate();
                     
       
             }
    }.start();
    
        
    }//GEN-LAST:event_btnDCMfindActionPerformed

    private void patientListMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListMousePressed
       
    }//GEN-LAST:event_patientListMousePressed

    private void patientListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_patientListPropertyChange
      
    }//GEN-LAST:event_patientListPropertyChange

    private void patientListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_patientListMouseClicked
        int selection = patientList.getSelectedIndex();
        if (selection!=-1) {
            Study s = list.getStudy(selection);
            studyInfoArea.setText(s.getStudyAccessionNumber() + " " + s.getStudyDescription());
        }
    }//GEN-LAST:event_patientListMouseClicked

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDCMfind;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCount;
    private javax.swing.JPanel modChartPanel;
    private javax.swing.JList<String> patientList;
    private javax.swing.JTextArea studyInfoArea;
    private javax.swing.JScrollPane studyPanel;
    // End of variables declaration//GEN-END:variables
}
